// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from main.djinni

package com.rushingvise.reactcppexample.jni;

import com.facebook.react.bridge.Callback;
import com.facebook.react.bridge.Promise;
import com.facebook.react.bridge.ReactApplicationContext;
import com.facebook.react.bridge.ReactContextBaseJavaModule;
import com.facebook.react.bridge.ReactMethod;
import com.facebook.react.bridge.ReadableArray;
import com.facebook.react.bridge.ReadableMap;
import com.facebook.react.bridge.WritableArray;
import com.facebook.react.bridge.WritableMap;
import com.facebook.react.module.annotations.ReactModule;
import com.rushingvise.reactcpp.ReactDjinni;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.atomic.AtomicBoolean;

@ReactModule(name = "DemoModule")
public abstract class DemoModule {
    public static final String EVENT_NAME = "DEMO_MODULE_EVENT";

    public static final String STRING_CONSTANT = "STRING";

    public static final int INT_CONSTANT = 13;

    public static final double DOUBLE_CONSTANT = 13.123;

    public static final boolean BOOL_CONSTANT = false;

    private final CppProxy mModule;

    public DemoModule(ReactApplicationContext reactContext) {
        super(reactContext);
        mModule = create(ReactDjinni.createReactBridge(reactContext));
    }

    @Override
    public String getName() {
        return "DemoModule";
    }

    @Override
    public Map<String, Object> getConstants() {
        final Map<String, Object> constants = new HashMap<>();
        constants.put("EVENT_NAME", EVENT_NAME);
        constants.put("STRING_CONSTANT", STRING_CONSTANT);
        constants.put("INT_CONSTANT", INT_CONSTANT);
        constants.put("DOUBLE_CONSTANT", DOUBLE_CONSTANT);
        constants.put("BOOL_CONSTANT", BOOL_CONSTANT);
        return constants;
    }

    private static native CppProxy create(com.rushingvise.reactcpp.ReactBridge bridge);

    @ReactMethod
    public void testPromise(Promise promise) {
        mModule.testPromise(ReactDjinni.wrap(promise));
    }

    @ReactMethod
    public void testCallback(Callback callback) {
        mModule.testCallback(ReactDjinni.wrap(callback));
    }

    @ReactMethod
    public void testMap(ReadableMap map, Promise promise) {
        mModule.testMap(ReactDjinni.wrap(map), ReactDjinni.wrap(promise));
    }

    @ReactMethod
    public void testArray(ReadableArray array, Callback callback) {
        mModule.testArray(ReactDjinni.wrap(array), ReactDjinni.wrap(callback));
    }

    @ReactMethod
    public void testBool(boolean value, Promise promise) {
        mModule.testBool(value, ReactDjinni.wrap(promise));
    }

    @ReactMethod
    public void testPrimitives(int i, double d, Callback callback) {
        mModule.testPrimitives(i, d, ReactDjinni.wrap(callback));
    }

    @ReactMethod
    public void testString(String value, Promise promise) {
        mModule.testString(value, ReactDjinni.wrap(promise));
    }

    @ReactMethod
    public void testEventWithArray(ReadableArray value) {
        mModule.testEventWithArray(ReactDjinni.wrap(value));
    }

    @ReactMethod
    public void testEventWithMap(ReadableMap value) {
        mModule.testEventWithMap(ReactDjinni.wrap(value));
    }

    private static final class CppProxy extends DemoModule
    {
        private final long nativeRef;
        private final AtomicBoolean destroyed = new AtomicBoolean(false);

        private CppProxy(long nativeRef)
        {
            if (nativeRef == 0) throw new RuntimeException("nativeRef is zero");
            this.nativeRef = nativeRef;
        }

        private native void nativeDestroy(long nativeRef);
        public void _djinni_private_destroy()
        {
            boolean destroyed = this.destroyed.getAndSet(true);
            if (!destroyed) nativeDestroy(this.nativeRef);
        }
        protected void finalize() throws java.lang.Throwable
        {
            _djinni_private_destroy();
            super.finalize();
        }

        public void testPromise(com.rushingvise.reactcpp.JavascriptPromise promise)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_testPromise(this.nativeRef, promise);
        }
        private native void native_testPromise(long _nativeRef, com.rushingvise.reactcpp.JavascriptPromise promise);

        public void testCallback(com.rushingvise.reactcpp.JavascriptCallback callback)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_testCallback(this.nativeRef, callback);
        }
        private native void native_testCallback(long _nativeRef, com.rushingvise.reactcpp.JavascriptCallback callback);

        public void testMap(com.rushingvise.reactcpp.JavascriptMap map, com.rushingvise.reactcpp.JavascriptPromise promise)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_testMap(this.nativeRef, map, promise);
        }
        private native void native_testMap(long _nativeRef, com.rushingvise.reactcpp.JavascriptMap map, com.rushingvise.reactcpp.JavascriptPromise promise);

        public void testArray(com.rushingvise.reactcpp.JavascriptArray array, com.rushingvise.reactcpp.JavascriptCallback callback)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_testArray(this.nativeRef, array, callback);
        }
        private native void native_testArray(long _nativeRef, com.rushingvise.reactcpp.JavascriptArray array, com.rushingvise.reactcpp.JavascriptCallback callback);

        public void testBool(boolean value, com.rushingvise.reactcpp.JavascriptPromise promise)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_testBool(this.nativeRef, value, promise);
        }
        private native void native_testBool(long _nativeRef, boolean value, com.rushingvise.reactcpp.JavascriptPromise promise);

        public void testPrimitives(int i, double d, com.rushingvise.reactcpp.JavascriptCallback callback)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_testPrimitives(this.nativeRef, i, d, callback);
        }
        private native void native_testPrimitives(long _nativeRef, int i, double d, com.rushingvise.reactcpp.JavascriptCallback callback);

        public void testString(String value, com.rushingvise.reactcpp.JavascriptPromise promise)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_testString(this.nativeRef, value, promise);
        }
        private native void native_testString(long _nativeRef, String value, com.rushingvise.reactcpp.JavascriptPromise promise);

        public void testEventWithArray(com.rushingvise.reactcpp.JavascriptArray value)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_testEventWithArray(this.nativeRef, value);
        }
        private native void native_testEventWithArray(long _nativeRef, com.rushingvise.reactcpp.JavascriptArray value);

        public void testEventWithMap(com.rushingvise.reactcpp.JavascriptMap value)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_testEventWithMap(this.nativeRef, value);
        }
        private native void native_testEventWithMap(long _nativeRef, com.rushingvise.reactcpp.JavascriptMap value);
        public static native DemoModule create(com.rushingvise.reactcpp.ReactBridge bridge);
    }
}
